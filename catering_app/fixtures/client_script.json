[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2024-10-24 22:27:46.201171",
  "module": "Catering",
  "name": "Sales Quotation",
  "script": "frappe.ui.form.on('Quotation', {\n    // Trigger on refresh\n    refresh(frm) {\n        update_custom_header_title(frm);\n    },\n    \n    // Trigger on field changes\n    custom_function_date: function(frm) {\n        update_custom_header_title(frm);\n    },\n    custom_function_time: function(frm) {\n        update_custom_header_title(frm);\n    },\n    custom_people_count: function(frm) {\n        update_custom_header_title(frm);\n        toggle_custom_button(frm); \n    }\n    \n    \n});\n\n// Function to show/hide the button based on the value of custom_people_count\nfunction toggle_custom_button(frm) {\n    if (frm.doc.custom_people_count > 0) {\n        // Show the button when custom_people_count is greater than 0\n        frm.add_custom_button(__('Update Quantities'), function() {\n            update_quantities_as_people_count(frm);\n        }, 'Actions').addClass('btn-primary');\n    } else {\n        // Hide the button if custom_people_count is 0 or less\n        frm.remove_custom_button('Update Quantities', 'Actions');\n    }\n}\n\n// Function to update the quantities of all items to custom_people_count\nfunction update_quantities_as_people_count(frm) {\n    if (frm.doc.custom_people_count > 0) {\n        // Loop through all the items in the child table\n        $.each(frm.doc.items || [], function(i, item) {\n            frappe.model.set_value(item.doctype, item.name, 'qty', frm.doc.custom_people_count);\n        });\n        frm.refresh_field('items'); // Refresh the items table to show updated values\n        frappe.msgprint(__('Item quantities have been updated to match the people count.'));\n    } else {\n        frappe.msgprint(__('Please enter a valid number for People Count'));\n    }\n}\n\nfunction update_custom_header_title(frm) {\n    if (frm.doc.custom_function_date && frm.doc.custom_function_time && frm.doc.custom_people_count) {\n        \n         // Convert the date to a day of the week\n        let date = new Date(frm.doc.custom_function_date);\n        let tamil_day = get_tamil_day_name(date.getDay());\n        \n        // Convert time to 12-hour format and determine period of day\n        let time_parts = frm.doc.custom_function_time.split(':');\n        let hours = parseInt(time_parts[0], 10);\n        let minutes = time_parts[1];\n\n        let period_of_day = '';\n        let meridian_time = '';\n\n        // Determine the period of day and convert to 12-hour format\n        if (hours < 12) {\n            if (hours < 10) {\n                period_of_day = 'காலை';  // Early Morning\n            } else if (hours >= 10 && hours < 17) {\n                period_of_day = 'மதியம்';  // Afternoon\n            }\n            meridian_time = period_of_day +' ' + (hours === 0 ? 12 : hours) + ':' + minutes + 'மணி ';\n        } else {\n            if (hours < 20) {\n                period_of_day = 'மாலை';  // Evening\n            } else if (hours >= 20 && hours < 24) {\n                period_of_day = 'இரவு';  // Night\n            }\n            meridian_time = period_of_day+ ' ' + (hours === 12 ? 12 : hours - 12) + ':' + minutes +' '+ 'மணி ';\n        }\n\n        // Constructing the custom header title with the formatted time and period of day\n        frm.set_value('custom_header_title', \n            frm.doc.custom_function_date + ' ' +\n            tamil_day+' '+\n            meridian_time + ' - ' +\n            frm.doc.custom_people_count + ' பேர்'\n        );\n    }\n}\n\n// Function to get the Tamil day name\nfunction get_tamil_day_name(day) {\n    let tamil_days = ['ஞாயிறு', 'திங்கள்', 'செவ்வாய்', 'புதன்', 'வியாழன்', 'வெள்ளி', 'சனி'];\n    return tamil_days[day];\n}\n",
  "view": "Form"
 }
]